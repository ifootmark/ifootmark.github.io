<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Webpack]]></title>
      <url>https://ifootmark.github.io/2016/09/04/doc-webpack/</url>
      <content type="html"><![CDATA[<hr>
<p><a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a>  一个前端工具，可以对 js/jsx/coffee/less/sass/图片等资源模块进行加载，预处理，再进行打包。<br>优点如下：</p>
<ul>
<li>以 commonJS 的形式来书写，支持 AMD/CMD ,方便项目迁移。</li>
<li>各资源被模块化。</li>
<li>替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转 base64 等。</li>
<li>支持很多模块加载器的调用，可以使模块加载器灵活定制，比如 babel-loader 加载器，该加载器能使我们使用 ES6 的语法来编写代码。</li>
<li>可以通过配置打包成多个文件，有效的利用浏览器的缓存功能提升性能。</li>
<li>使用模块加载器，可以支持 sass，less 等处理器进行打包且支持静态资源样式及图片进行打包。</li>
<li>在内存中完成打包，性能更快。</li>
</ul>
<p>Webpack 将项目中用到的一切静态资源都视之为模块，模块之间可以互相依赖。Webpack 对它们进行统一的管理以及打包发布。</p>
<a id="more"></a>
<h3 id="JS-规范"><a href="#JS-规范" class="headerlink" title="JS 规范"></a>JS 规范</h3><p>对 AMD/CMD 模式来说，模块是异步加载的，所以我们常规需要使用 define 函数来定义回调。<br>AMD，用过 RequireJS 的并不陌生，AMD 是在 CommonJS 的基础上考虑了浏览器的异步加载特性而产生的，可以让模块异步加载并保证执行顺序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'a'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        foo: a.foo</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>CMD，用过 SeaJS 的小伙伴是不是很熟悉。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div><div class="line">    exports.foo = a.foo;</div><div class="line">    exports.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>webpack 遵循 commonJS 语法，无须任何 define ，这种方式语法更加简洁直观。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div><div class="line">exports.foo = a.foo;          </div><div class="line">exports.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>CommonJS 的 require 函数虽是同步加载，但浏览器并不同步加载该模块，对 require 的处理是由 Webpack 进行解析和打包的（类似 browserify），浏览器只需要执行打包后的代码。但是对于 React 中的 JSX 语法，这就需要使用 Webpack 的扩展加载器来处理了，如 jsx-loader。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.全局安装</p>
<p>执行命令：<code>npm install webpack -g</code></p>
<p>2.项目依赖安装</p>
<p>执行命令：<code>npm install webpack --save-dev</code><br>node_modules 文件夹中会包含 webpack，此时可以使用 webpack 命令了</p>
<p>3.生成 package.json 文件</p>
<p>根目录下执行命令：<code>npm init</code></p>
<p>4.安装插件</p>
<p>若 package.json 文件已配置好，根目录下执行命令：<code>npm install</code></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件 webpack.config.js，好比 Gulpfile.js 或 Gruntfile.js，用来配置项目，告 诉webpack 需要做哪些操作。</p>
<p>一个简单的 webpack.config.js 代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123; </div><div class="line">    entry: &#123;</div><div class="line">        main : <span class="string">'./assets/js/src/main.js'</span>,</div><div class="line">    &#125;, </div><div class="line">    output: &#123;</div><div class="line">        path: path.join(__dirname, <span class="string">'./assets/build/'</span>),</div><div class="line">        publicPath: <span class="string">'/assets/build/'</span>,</div><div class="line">        filename: <span class="string">'js/[name].bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">      loaders: [</div><div class="line">        &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">        <span class="comment">//&#123; test: /\.css$/,loader: ExtractTextPlugin.extract("style-loader", "css-loader")&#125;,</span></div><div class="line">        &#123; test: <span class="regexp">/\.js[x]?$/</span>, loaders: [<span class="string">'react-hot'</span>, <span class="string">'jsx?harmony'</span>], exclude: <span class="regexp">/node_modules/</span> &#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.scss$/</span>, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.(png|jpg)$/</span>, loader: <span class="string">'url-loader?limit=8192&amp;name=images/[name].[hash].[ext]'</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.coffee$/</span>, loader: <span class="string">'coffee'</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.html$/</span>,   loader: <span class="string">'html'</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.json$/</span>,   loader: <span class="string">'json'</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.(woff|woff2)$/</span>,   loader: <span class="string">"url?limit=10000&amp;minetype=application/font-woff&amp;name=fonts/[name].[ext]"</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.ttf$/</span>,    loader: <span class="string">"file?name=fonts/[name].[ext]"</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.eot$/</span>,    loader: <span class="string">"file?name=fonts/[name].[ext]"</span>&#125;,</div><div class="line">        &#123; test: <span class="regexp">/\.svg$/</span>,    loader: <span class="string">"file?name=fonts/[name].[ext]"</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    resolve: &#123;</div><div class="line">        root: path.resolve(<span class="string">'./assets'</span>),</div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">        alias: &#123;</div><div class="line">            jquery : <span class="string">'js/lib/jquery-2.2.0.min.js'</span>,</div><div class="line">            semantic : <span class="string">'3rdparty/dist/semantic.min.js'</span>,</div><div class="line">            signals : <span class="string">'3rdparty/signals.min.js'</span>,</div><div class="line">            lodash : <span class="string">'js/lib/lodash.min.js'</span>,</div><div class="line">            component : <span class="string">'js/jsx/component.js'</span>,</div><div class="line">            lib : <span class="string">'js/lib/lib.js'</span>,</div><div class="line">            <span class="built_in">module</span>:<span class="string">'js/src/module.js'</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    plugins: []</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>entry</code>: 入口文件，比如我这边的入口文件时 main.js<br><code>output</code>: 目标文件，我这边是在根目录下生成 assets/build/js 文件夹，该文件夹内有 [name].bundle.js 文件; output.path: 打包文件存放的绝对路径;<br>output.publicPath: 网站运行时的访问路径;<br>output.filename: 打包后的文件名;<br><code>resolve</code>: 解析模块路径;<br>root：绝对路径;<br>extensions：可以用来指定模块的后缀，这样在引入模块时就不需要写后缀，会自动补全;<br>alias：别名，直接require别名;<br><code>plugins</code>: 定义了需要使用的插件，比如 commonsPlugin 在打包多个入口文件时会提取公用的部分。<br><code>module.loaders</code>：文件加载器，对相应文件需要使用什么加载器来处理，比如 jsx-loader 加载器处理 jsx 文件，还有 style-loader 和 css-loader 加载器，处理样式文件。</p>
<p>加载器安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jsx-loader style-loader css-loader sass-loader url-loader file-loader --save-dev</div></pre></td></tr></table></figure>
<p>更多详情参见：<a href="http://webpack.github.io/docs/configuration.html" target="_blank" rel="external">configuration</a></p>
<h3 id="Webpack-命令"><a href="#Webpack-命令" class="headerlink" title="Webpack 命令"></a>Webpack 命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">webpack     <span class="comment">//启动webpack命令</span></div><div class="line">webpack -p  <span class="comment">//对打包后的文件进行压缩</span></div><div class="line">webpack -d  <span class="comment">//提供SourceMaps，方便调试</span></div><div class="line">webpack -w  <span class="comment">//提供watch监听，实时打包更新</span></div><div class="line">webpack --config    <span class="comment">//指定配置文件</span></div><div class="line">webpack --colors    <span class="comment">//输出结果带彩色，比如：会用红色显示耗时较长的步骤</span></div><div class="line">webpack --profile   <span class="comment">//输出性能数据，可以看到每一步的耗时</span></div><div class="line"><span class="comment">//默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</span></div><div class="line">webpack --display-modules</div><div class="line">webpack --display-error-details     <span class="comment">//可以查看详细信息。</span></div></pre></td></tr></table></figure>
<p>如命令：webpack –display-modules –profile –colors</p>
<p>main.html 代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>main<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/assets/build/css/main.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rp_main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"assets/build/js/vendor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"assets/build/js/main.bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>main.js 代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"../../3rdparty/dist/semantic.min.css"</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">"../../style/lib.css"</span>);</div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</div><div class="line"><span class="keyword">var</span> m=<span class="built_in">require</span>(<span class="string">'module'</span>);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">m.app</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">m.app</span>&gt;</span>, document.getElementById('rp_main'));</span></div></pre></td></tr></table></figure>
<p>到此，webpack 都配置好了，执行行命令：webpack，ok</p>
<h3 id="模块加载器"><a href="#模块加载器" class="headerlink" title="模块加载器"></a>模块加载器</h3><p>Webpack 将所有静态资源都认为是模块，比如 js，jsx，css，scss，图片等，从而可以对其进行统一管理，通过对应的加载器处理成模块。<br>Webpack 的加载器之间可以进行串联，一个加载器的输出可以成为另一个加载器的输入。比如 less 文件先通过 <code>less-loader</code> 处理成 css，然后再通过 <code>css-loader</code> 加载成css模块，最后由 <code>style-loader</code> 加载器对其做最后的处理，通过 <code>style</code> 标签将其应用到最终的浏览器环境。<br>为了让Webpack识别什么样的资源应该用什么加载器去载入，需要在配置文件进行配置，通过正则表达式对文件名进行匹配。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  loaders: [</div><div class="line">    &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.js[x]?$/</span>, loaders: [<span class="string">'react-hot'</span>, <span class="string">'jsx?harmony'</span>], exclude: <span class="regexp">/node_modules/</span> &#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.scss$/</span>, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.(png|jpg)$/</span>, loader: <span class="string">'url-loader?limit=8192&amp;name=images/[name].[hash].[ext]'</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.coffee$/</span>, loader: <span class="string">'coffee'</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.html$/</span>,   loader: <span class="string">'html'</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.json$/</span>,   loader: <span class="string">'json'</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.(woff|woff2)$/</span>,   loader: <span class="string">"url?limit=8192&amp;minetype=application/font-woff&amp;name=fonts/[name].[ext]"</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.ttf$/</span>,    loader: <span class="string">"file?name=fonts/[name].[ext]"</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.eot$/</span>,    loader: <span class="string">"file?name=fonts/[name].[ext]"</span>&#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.svg$/</span>,    loader: <span class="string">"file?name=fonts/[name].[ext]"</span>&#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加载器之间的级联是通过 ! 来连接，例如：style-loader!css-loader!less-loader。”-loader” 可以省略，如：style!css!less。<br>jsx 文件由 jsx-loader 处理，加载器支持参数，?harmony 参数使其支持ES6语法。当然也可以用 babel-loader<br>图片资源，由 url-loader 实现，代码中 url-loader?limit=8192 小于 8k 的图片转为 Base64。<br>更多详情参见：<a href="http://webpack.github.io/docs/loaders.html" target="_blank" rel="external">loaders</a>，<a href="http://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">list-of-loaders</a></p>
<h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><p>别名 <code>resolve.alias</code>，把一个请求重定向到另一个路径，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    root: path.resolve(<span class="string">'./assets'</span>),</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">    alias: &#123;</div><div class="line">        jquery : <span class="string">'js/lib/jquery-2.2.0.min.js'</span>,</div><div class="line">        semantic : <span class="string">'3rdparty/dist/semantic.min.js'</span>,</div><div class="line">        signals : <span class="string">'3rdparty/signals.min.js'</span>,</div><div class="line">        lodash : <span class="string">'js/lib/lodash.min.js'</span>,</div><div class="line">        component : <span class="string">'js/jsx/component.js'</span>,</div><div class="line">        lib : <span class="string">'js/lib/lib.js'</span>,</div><div class="line">        <span class="built_in">module</span>:<span class="string">'js/src/module.js'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>require(‘jquery’)，其实就等价于 require(‘./assets/js/lib/jquery-2.2.0.min.js’)。</p>
<h3 id="公共模块提取"><a href="#公共模块提取" class="headerlink" title="公共模块提取"></a>公共模块提取</h3><p>使用 <code>CommonsChunkPlugin</code> 插件来提取多个页面之间的公共模块，并将该模块打包为 common.js 。配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">    main : <span class="string">'./assets/js/src/main.js'</span>,</div><div class="line">    form : <span class="string">'./assets/js/jsx/form.js'</span>,</div><div class="line">    vendor: [<span class="string">'jquery'</span>,<span class="string">'react'</span>,<span class="string">'react-dom'</span>,<span class="string">'signals'</span>,<span class="string">'semantic'</span>,<span class="string">'component'</span>,<span class="string">'lib'</span>]</div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> CommonsChunkPlugin(&#123;</div><div class="line">        name: <span class="string">'vendor'</span>,</div><div class="line">        filename: <span class="string">'js/vendor.js'</span>,</div><div class="line">        chunks: [<span class="string">"main"</span>,<span class="string">"form"</span>],</div><div class="line">        minChunks: <span class="number">2</span></div><div class="line">    &#125;)</div><div class="line">]</div></pre></td></tr></table></figure>
<p><code>entry</code>: 入口文件增加 entry.main, entry.form, entry.vendor<br><code>plugins</code>: 插件项增加 new CommonsChunkPlugin<br>最终将生成公共模块文件 js/vendor.js<br>更多详情参见：<a href="http://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">code-splitting</a></p>
<h3 id="独立打包样式"><a href="#独立打包样式" class="headerlink" title="独立打包样式"></a>独立打包样式</h3><p>样式会被默认打包到 js 文件中，怎么独立出来作为单独样式文件，然后在页面中用 <code>link</code> 标签引入。<br>用插件 <code>extract-text-webpack-plugin</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">    main : <span class="string">'./assets/js/src/main.js'</span>,</div><div class="line">    form : <span class="string">'./assets/js/jsx/form.js'</span>,</div><div class="line">    vendor: [<span class="string">'jquery'</span>,<span class="string">'react'</span>,<span class="string">'react-dom'</span>,<span class="string">'signals'</span>,<span class="string">'semantic'</span>,<span class="string">'component'</span>,<span class="string">'lib'</span>]</div><div class="line">&#125;,</div><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  loaders: [</div><div class="line">    &#123; test: <span class="regexp">/\.css$/</span>,loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>)&#125;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"css/[name].css"</span>)</div><div class="line">]</div></pre></td></tr></table></figure>
<p><code>module.loaders</code> 增加 { test: /.css$/,loader: ExtractTextPlugin.extract(“style-loader”, “css-loader”)}<br><code>plugins</code>: 插件项增加 new ExtractTextPlugin(“css/[name].css”)<br>最终将生成公共模块文件 css/main.css 和 css/form.css<br>更多详情参见：<a href="http://webpack.github.io/docs/stylesheets.html" target="_blank" rel="external">stylesheets</a></p>
<h3 id="打包成多个资源文件"><a href="#打包成多个资源文件" class="headerlink" title="打包成多个资源文件"></a>打包成多个资源文件</h3><p>为减少加载时间，可能要将项目打包成多个资源文件，怎么办呢？创建多个入口文件：如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">    main : <span class="string">'./assets/js/src/main.js'</span>,</div><div class="line">    form : <span class="string">'./assets/js/jsx/form.js'</span>,</div><div class="line">    vendor: [<span class="string">'jquery'</span>,<span class="string">'react'</span>,<span class="string">'react-dom'</span>,<span class="string">'signals'</span>,<span class="string">'semantic'</span>,<span class="string">'component'</span>,<span class="string">'lib'</span>]</div><div class="line">&#125;, </div><div class="line">output: &#123;</div><div class="line">    path: path.join(__dirname, <span class="string">'./assets/build/'</span>),</div><div class="line">    publicPath: <span class="string">'/assets/build/'</span>,</div><div class="line">    filename: <span class="string">'js/[name].bundle.js'</span></div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> CommonsChunkPlugin(&#123;</div><div class="line">        name: <span class="string">'vendor'</span>,</div><div class="line">        filename: <span class="string">'js/vendor.js'</span>,</div><div class="line">        chunks: [<span class="string">"main"</span>,<span class="string">"form"</span>],</div><div class="line">        minChunks: <span class="number">2</span></div><div class="line">    &#125;)</div><div class="line">]</div></pre></td></tr></table></figure>
<p>打包后，会生成三个文件，分别为：main.bundle.js, form.bundle.js, vendor.js<br>更多详情参见：<a href="http://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">code-splitting</a></p>
<h3 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h3><p>图片资源由 <code>url-loader</code> 来加载的，既可以是 css 文件里 url 属性，也可以是 require 请求，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bgimg</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/18050.png);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>); </div><div class="line">img.src = <span class="built_in">require</span>(<span class="string">"../../images/a.jpg"</span>); </div><div class="line"><span class="built_in">document</span>.body.appendChild(img);</div></pre></td></tr></table></figure>
<p>webpack.config.js 配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    path: path.join(__dirname, <span class="string">'./assets/build/'</span>),</div><div class="line">    publicPath: <span class="string">'/assets/build/'</span>,</div><div class="line">    filename: <span class="string">'js/[name].bundle.js'</span></div><div class="line">&#125;,</div><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  loaders: [</div><div class="line">    &#123; test: <span class="regexp">/\.(png|jpg)$/</span>, loader: <span class="string">'url-loader?limit=8192&amp;name=images/[name].[hash].[ext]'</span>&#125;,</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>小于 8k 的图片会转化为 base64，否则，在 ./assets/build/images 目录下生成相应的图片。此时要注意 output.publicPath 的配置，若为空，则为根目录，有可能导致打包后的图片路径找不到。</p>
<h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>使用 <code>require.ensure</code>，当需要时再加载，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"module-a"</span>, <span class="string">"module-b"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"module-a"</span>);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>更多详情参见：<a href="http://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">code-splitting</a></p>
<h3 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h3><p>有些文件我们并不希望被打包，而是以CDN方式并以 <code>script</code> 的形式引用，但在 webpack 中又可以正常使用。怎么办呢？请用 externals 声明外部依赖。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">externals: &#123;</div><div class="line">    react : <span class="string">"React"</span>,</div><div class="line">    jquery: <span class="string">"jQuery"</span>,</div><div class="line">    lodash: <span class="string">"_"</span>,</div><div class="line">    <span class="built_in">module</span>:<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多详情参见：<a href="http://webpack.github.io/docs/library-and-externals.html" target="_blank" rel="external">library-and-externals</a></p>
<h3 id="Webpack-amp-Gulp"><a href="#Webpack-amp-Gulp" class="headerlink" title="Webpack &amp; Gulp"></a>Webpack &amp; Gulp</h3><p>webpack 可以与 gulp 配合，一起使用，配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</div><div class="line">gulp.task(<span class="string">"webpack"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    webpack(webpackConfig, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">"webpack:build"</span>, err);</div><div class="line">      gutil.log(<span class="string">"[webpack:build]"</span>, stats.toString(&#123;</div><div class="line">        colors: <span class="literal">true</span></div><div class="line">      &#125;));</div><div class="line">      callback();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>执行命令：<code>gulp webpack</code>，ok<br>更多详情参见：<a href="http://webpack.github.io/docs/usage-with-gulp.html" target="_blank" rel="external">usage-with-gulp</a></p>
<h3 id="Webpack-amp-React"><a href="#Webpack-amp-React" class="headerlink" title="Webpack &amp; React"></a>Webpack &amp; React</h3><p>一个简单的 React 组件，module.js 代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello &#123;this.props.name&#125;!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> App = React.createClass(&#123;</div><div class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> &#123;name: <span class="string">'test'</span>&#125;;</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  Hello:Hello,</div><div class="line">  App:App</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 main.js 中引入 module.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"../../3rdparty/dist/semantic.min.css"</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">"../../style/lib.css"</span>);</div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</div><div class="line"><span class="keyword">var</span> m=<span class="built_in">require</span>(<span class="string">'module'</span>);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">m.app</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">m.app</span>&gt;</span>, document.getElementById('rp_main'));</span></div></pre></td></tr></table></figure>
<p>这时，main.js 和 module.js 都是JSX语法，需要对它们进行预处理，这就要引入 JSX 加载器。配置文件中加入如下配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  loaders: [</div><div class="line">    &#123; test: <span class="regexp">/\.js[x]?$/</span>, loaders: [<span class="string">'jsx?harmony'</span>], exclude: <span class="regexp">/node_modules/</span> &#125;,</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>Webpack 提供了一个轻量的 node.js express 服务器，开发过程中，监听文件变化，实时打包，通过 socket.io 通知客户端，实现页面的自动刷新。<br>首先，执行安装命令：<code>npm install webpack-dev-server --save-dev</code><br>启动开发服务器，运行命令：<code>webpack-dev-server</code>，请看控制台日志，然后访问 <code>localhost:8080/webpack-dev-server</code>。改变相应 js 中的内容，保存，看页面，有效果了。再看看控制台输出日志，自动编译哦，然后把编译结果通知客户端更新。<br>更多详情参见：<a href="http://webpack.github.io/docs/webpack-dev-server.html" target="_blank" rel="external">webpack-dev-server</a></p>
<h3 id="react-hot-loader"><a href="#react-hot-loader" class="headerlink" title="react-hot-loader"></a>react-hot-loader</h3><p>Webpack 有运行时模块替换功能，称之为 Hot Module Replacement (HMR)。当某个模块代码发生变化时，Webpack 实时打包将其推送到页面并进行替换，从而无需刷新页面就实现代码替换。<br>在 React 开发中，针对 React 出现了一个第三方 <code>react-hot-loader</code> 加载器，可以轻松实现 React 组件的热替换。因为 React 的每一次更新都是全局刷新虚拟 DOM，让 React 组件的热替换可以成为通用的加载器，从而极大提高开发效率。<br>首先，执行安装命令：<code>npm install react-hot-loader —save-dev</code><br>webpack-dev-server 需要开启 HMR 参数 hot，下面创建一个 server.js 文件启动 Webpack 开发服务器，代码如下：</p>
<p>server.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../webpack.config2'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">new</span> WebpackDevServer(webpack(config), &#123;</div><div class="line">  publicPath: config.output.publicPath,</div><div class="line">  hot: <span class="literal">true</span>,</div><div class="line">  historyApiFallback: <span class="literal">true</span></div><div class="line">&#125;).listen(<span class="number">3000</span>, <span class="string">'localhost'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening at localhost:3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>除了 server.js 外，webpack.config.js 还需要如下修改：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">    main : <span class="string">'./assets/js/src/main.js'</span>,</div><div class="line">    form : <span class="string">'./assets/js/jsx/form.js'</span>,</div><div class="line">    index: [</div><div class="line">        <span class="string">'webpack-dev-server/client?http://localhost:3000'</span>, <span class="comment">// WebpackDevServer host and port</span></div><div class="line">        <span class="string">'webpack/hot/only-dev-server'</span>,</div><div class="line">        <span class="string">'./assets/js/src/index.js'</span> <span class="comment">// Your appʼs entry point</span></div><div class="line">    ],</div><div class="line">    vendor: [<span class="string">'jquery'</span>,<span class="string">'react'</span>,<span class="string">'react-dom'</span>,<span class="string">'signals'</span>,<span class="string">'semantic'</span>,<span class="string">'component'</span>,<span class="string">'lib'</span>]</div><div class="line">&#125;,</div><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  loaders: [</div><div class="line">    &#123; test: <span class="regexp">/\.js[x]?$/</span>, loaders: [<span class="string">'react-hot'</span>, <span class="string">'jsx?harmony'</span>], exclude: <span class="regexp">/node_modules/</span> &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin()</div><div class="line">]</div></pre></td></tr></table></figure>
<p><code>entry.index</code>：配置 webpack 开发服务器，接收 Webpack 的推送，通知相关 React 组件进行重新 Render。<br><code>module.loaders</code>：Webpack 用 react-hot-loader 加载 React 组件。<br><code>plugins</code>：加上热替换的插件和防止报错的插件。<br>执行命令：<code>node server.js</code> ，ok，资源的任何修改，无需刷新页面，即可重新宣染。<br>更多详情参见：<a href="http://gaearon.github.io/react-hot-loader/getstarted/" target="_blank" rel="external">react-hot-loader</a></p>
<hr>
]]></content>
      
        <categories>
            
            <category> automate </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> CommonJS </tag>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React]]></title>
      <url>https://ifootmark.github.io/2016/09/04/doc-react/</url>
      <content type="html"><![CDATA[<hr>
<p><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a> 是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库。 我们以 react 为库来创建组件，组件有自己的结构、逻辑、样式，会依赖一些资源，或依赖其他组件。</p>
<ul>
<li>通过前端模板引擎定义结构</li>
<li>JS 文件中写自己的逻辑</li>
<li>CSS 中写组件的样式</li>
<li>通过 RequireJS、SeaJS 等库来解决模块之间的相互依赖</li>
</ul>
<a id="more"></a>
<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>用 React 写组件的时候，通常会用到 JSX 语法，HTML 语言直接写在 JavaScript 语言之中，被 JSX 转换工具转换成纯 Javascript 代码，当然你想直接使用纯 Javascript 代码写也是可以的，只是利用 JSX，组件的结构和组件之间的关系看上去更加清晰。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/JSXTransformer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/jsx"</span>&gt;</span><span class="xml"></span></div><div class="line">        React.render(</div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">            document.getElementById('example')</div><div class="line">        );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过 JavaScript 直接生成模板，这样你就可以用一个真正语言的所有表达能力去构建用户界面。为了使这变得更简单，我们做了一个非常简单、可选类似 HTML 语法 ，通过函数调用即可生成模板的编译器，称为 JSX。</p>
<p>文件分离</p>
<p>你的 React JSX 代码文件可以写在另外的文件里。新建下面的 helloworld.js。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">React.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>然后在 helloworld.html 引用该文件：<br><code>&lt;script type=&quot;text/jsx&quot; src=&quot;./helloworld.js&quot;&gt;&lt;/script&gt;</code></p>
<h3 id="JSX-转化器"><a href="#JSX-转化器" class="headerlink" title="JSX 转化器"></a>JSX 转化器</h3><p>JSX 转换，下面 JSX 代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Nav = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line"><span class="keyword">var</span> app = <span class="xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;<span class="name">profile</span>&gt;</span>click<span class="tag">&lt;/<span class="name">profile</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span>;</div></pre></td></tr></table></figure></p>
<p>转化后：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Nav = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line"><span class="keyword">var</span> app = React.createElement(</div><div class="line">    Nav,</div><div class="line">    &#123;color:<span class="string">"blue"</span>&#125;,</div><div class="line">    React.createElement(Profile, <span class="literal">null</span>, <span class="string">"click"</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>React.createElement 这个方法有三个参数，第一个参数可以是一个字符串，表示是一个HTML标准内的元素，或者是一个 ReactClass 类型的对象，表示我们之前封装好的自定义组件。第二个参数是一个对象，它保存了这个元素的所有固有属性；从第三个参数，内容或子元素。</p>
<p>把JSX语法的代码转化为纯 Javascript 代码，有多种方式。</p>
<p>1、对于内联与 HTML 中的代码或者是未经过转化的外部文件，在 script 标签中要加上 type=”text/jsx”，并引入 JSXTransformer.js 文件即可，不过这种方式并不建议在生产环境使用，建议的方法是在代码上线前就将代码转换好。</p>
<p>2、也可以使用 npm 全局安装 <code>react-tools</code>：<br><code>npm install -g react-tools</code></p>
<p>执行命令：<br><code>jsx src/ build/</code></p>
<p>若想监听文件变化并自动编译，可执行命令：<br><code>jsx --watch src/ build/</code></p>
<p>3、如果使用自动化工具，比如 gulp 的话，可以使用相应插件 gulp-react。</p>
<p>更多详情参见：<a href="http://docs.reactjs-china.com/react/docs/jsx-in-depth.html" target="_blank" rel="external">jsx-in-depth</a></p>
<h3 id="HTML-标签-amp-React-模块"><a href="#HTML-标签-amp-React-模块" class="headerlink" title="HTML 标签 &amp; React 模块"></a>HTML 标签 &amp; React 模块</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 模块 (classes)。</p>
<p>要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。要创建一个 HTML 标准中存在的元素，直接像写 HTML 代码一样即可：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDivElement = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"foo"</span> /&gt;</span>;</span></div><div class="line">React.render(myDivElement, document.body);</div></pre></td></tr></table></figure>
<p>要渲染 React 模块，只需创建一个大写字母开头的本地变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line"><span class="keyword">var</span> myElement = <span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">someProperty</span>=<span class="string">&#123;true&#125;</span> /&gt;</span>;</span></div><div class="line">React.render(myElement, document.body);</div></pre></td></tr></table></figure>
<p>React 的 JSX 里约定分别使用首字母大、小写来区分本地模块的类和 HTML 标签。</p>
<p>不过需要注意的是 class 和 for 这两个属性，由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。</p>
<p>还有一点是，在创建 HTML 标准内的元素时，JSX 转化器会丢弃那些非标准的属性，如果一定要添加自定义属性，那么需要在这些自定义属性之前添加 data- 前缀。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-custom-attribute</span>=<span class="string">"foo"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Javascript-表达式"><a href="#Javascript-表达式" class="headerlink" title="Javascript 表达式"></a>Javascript 表达式</h3><p>在 JSX 语法中，要使用 JavaScript 表达式作为属性值，只需把这个表达式用一对大括号 ({}) 包起来，不要用引号 (“”)。 比如下面这个使用三目运算符的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Input (JSX):</span></div><div class="line"><span class="keyword">var</span> content = <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span>&#123;window.isLoggedIn ? <span class="tag">&lt;<span class="name">Nav</span> /&gt;</span> : <span class="tag">&lt;<span class="name">Login</span> /&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span>;</div><div class="line"><span class="comment">// Output (JS):</span></div><div class="line"><span class="keyword">var</span> content = React.createElement(</div><div class="line">    Container,</div><div class="line">    <span class="literal">null</span>,</div><div class="line">    <span class="built_in">window</span>.isLoggedIn ? React.createElement(Nav) : React.createElement(Login)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>更多详情参见：<a href="http://docs.reactjs-china.com/react/docs/jsx-in-depth.html" target="_blank" rel="external">jsx-in-depth</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>JSX 里添加注释很容易；它们只是 JS 表达式而已。你只需要在一个标签的子节点内(非最外层)小心地用 {} 包围要注释的部分。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> content = (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Nav</span>&gt;</span></span></div><div class="line">    &#123;/* 一般注释, 用 &#123;&#125; 包围 */&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">Person</span></span></div><div class="line">      /* 多</div><div class="line">         行</div><div class="line">         注释 */</div><div class="line">      <span class="attr">name</span>=<span class="string">&#123;window.isLoggedIn</span> ? <span class="attr">window.name</span> <span class="attr">:</span> ''&#125; // 行尾注释</div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="传播属性"><a href="#传播属性" class="headerlink" title="传播属性"></a>传播属性</h3><p>在 JSX 中，可以使用 … 运算符，表示将一个对象的键值对与 ReactElement 的 props 属性合并，这个 … 运算符的实现类似于 ES6 Array 中的 … 运算符的特性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> props = &#123; foo: x, bar: y &#125;;</div><div class="line"><span class="keyword">var</span> component = <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123; <span class="attr">...props</span> &#125; /&gt;</span>;</span></div></pre></td></tr></table></figure>
<p>相当于：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> component = <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">foo</span>=<span class="string">&#123;x&#125;</span> <span class="attr">bar</span>=<span class="string">&#123;y&#125;</span> /&gt;</span></span></div></pre></td></tr></table></figure>
<p>它也可以和普通的XML属性混合使用，需要同名属性，后者将覆盖前者：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> props = &#123; foo: <span class="string">'default'</span> &#125;;</div><div class="line"><span class="keyword">var</span> component = <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">foo</span>=<span class="string">&#123;</span>'<span class="attr">override</span>'&#125; /&gt;</span>;</span></div><div class="line">console.log(component.props.foo); // 'override'</div></pre></td></tr></table></figure>
<p>更多详情参见：<a href="http://docs.reactjs-china.com/react/docs/jsx-spread.html" target="_blank" rel="external">jsx-spread</a></p>
<h3 id="获取真实的-DOM-节点"><a href="#获取真实的-DOM-节点" class="headerlink" title="获取真实的 DOM 节点"></a>获取真实的 DOM 节点</h3><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM 上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。<br>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">    componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> test = ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.test);</div><div class="line">        $(test).focus();</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>需要注意的是，由于 this.refs.[refName] 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。<br>更多详情参见：<a href="http://facebook.github.io/react/docs/more-about-refs.html" target="_blank" rel="external">more-about-refs</a></p>
<h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillMount()</div><div class="line">componentDidMount()</div><div class="line">componentWillUpdate(object nextProps, object nextState)</div><div class="line">componentDidUpdate(object prevProps, object prevState)</div><div class="line">componentWillUnmount()</div></pre></td></tr></table></figure>
<p>更多详情参见：<a href="http://facebook.github.io/react/docs/component-specs.html#lifecycle-methods" target="_blank" rel="external">lifecycle-methods</a></p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>React 组件非常简单。你可以认为它们就是简单的函数，接受 props 和 state 作为参数，然后渲染出 HTML。正是因为它们是这么的简单，这使得它们非常容易理解。</p>
<p>注意: 有一个限制，React 组件只能渲染单个根节点。如果你想要返回多个节点，它们必须被包含在同一个节点里。</p>
<p>还有很多内容，待续…</p>
<hr>
]]></content>
      
        <categories>
            
            <category> component </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> CommonJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github-list]]></title>
      <url>https://ifootmark.github.io/2016/09/04/github-list/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="fm-react"><a href="#fm-react" class="headerlink" title="fm-react"></a>fm-react</h3><p>基于 <code>React</code> 组件化开发，<code>CommonJS</code> 规范编写代码， 用 <code>gulp</code> 和 <code>webpack</code> 自动化打包。<br>项目：<a href="https://github.com/ifootmark/fm-react" target="_blank" rel="external">https://github.com/ifootmark/fm-react</a><br>Demo：<a href="https://ifootmark.github.io/fm-react/demo">https://ifootmark.github.io/fm-react/demo</a></p>
<a id="more"></a>
<h3 id="fm-build-quickstart"><a href="#fm-build-quickstart" class="headerlink" title="fm-build-quickstart"></a>fm-build-quickstart</h3><p>快速构建项目，组件化、模块化、自动化，一条命令打包发布。<br>项目：<a href="https://github.com/ifootmark/fm-build-quickstart" target="_blank" rel="external">https://github.com/ifootmark/fm-build-quickstart</a></p>
<h3 id="fm-angular2"><a href="#fm-angular2" class="headerlink" title="fm-angular2"></a>fm-angular2</h3><p>Angular 2，本项目包括 ES6、TypeScript、模板、数据绑定、组件、类、服务、依赖注入、路由、组件间通信等以及用 webpack 打包发布。<br>项目：<a href="https://github.com/ifootmark/fm-angular2" target="_blank" rel="external">https://github.com/ifootmark/fm-angular2</a><br>Demo：<a href="https://ifootmark.github.io/fm-angular2/ng2/index">https://ifootmark.github.io/fm-angular2/ng2/index</a></p>
<h3 id="fm-ember"><a href="#fm-ember" class="headerlink" title="fm-ember"></a>fm-ember</h3><p>EmberJS， MVC 框架，本项目包括模板、视图、数据绑定、控制器、模型、路由、承诺等以及用 Grunt 打包发布。<br>项目：<a href="https://github.com/ifootmark/fm-ember" target="_blank" rel="external">https://github.com/ifootmark/fm-ember</a><br>Demo：<a href="https://ifootmark.github.io/fm-ember">https://ifootmark.github.io/fm-ember</a></p>
<h3 id="fm-node-proxy"><a href="#fm-node-proxy" class="headerlink" title="fm-node-proxy"></a>fm-node-proxy</h3><p>基于 NodeJS+Express 的反向代理，可实现跨域访问、记录日志、数据跟踪等。<br>项目：<a href="https://github.com/ifootmark/fm-node-proxy" target="_blank" rel="external">https://github.com/ifootmark/fm-node-proxy</a><br>npm 包：<a href="https://www.npmjs.com/package/fm-node-proxy" target="_blank" rel="external">https://www.npmjs.com/package/fm-node-proxy</a></p>
<h3 id="fm-dialog"><a href="#fm-dialog" class="headerlink" title="fm-dialog"></a>fm-dialog</h3><p>简单自用 dialog 对话框。<br>项目：<a href="https://github.com/ifootmark/fm-dialog" target="_blank" rel="external">https://github.com/ifootmark/fm-dialog</a><br>Demo：<a href="http://ifootmark.github.io/fm-dialog/demo.html">http://ifootmark.github.io/fm-dialog/demo.html</a><br>npm 包：<a href="https://www.npmjs.com/package/fm-dialog" target="_blank" rel="external">https://www.npmjs.com/package/fm-dialog</a></p>
<h3 id="fm-localstorage"><a href="#fm-localstorage" class="headerlink" title="fm-localstorage"></a>fm-localstorage</h3><p>对 localStorage 封闭，方便调用，调用方法请查看 API。<br>项目：<a href="https://github.com/ifootmark/fm-localstorage" target="_blank" rel="external">https://github.com/ifootmark/fm-localstorage</a><br>Demo：<a href="http://ifootmark.github.io/fm-localstorage/test/index.html">http://ifootmark.github.io/fm-localstorage/test/index.html</a><br>npm 包：<a href="https://www.npmjs.com/package/fm-localstorage" target="_blank" rel="external">https://www.npmjs.com/package/fm-localstorage</a></p>
<h3 id="fm-indexeddb"><a href="#fm-indexeddb" class="headerlink" title="fm-indexeddb"></a>fm-indexeddb</h3><p>对 IndexedDB 封闭，方便调用，调用方法请查看 API。<br>项目：<a href="https://github.com/ifootmark/fm-indexeddb" target="_blank" rel="external">https://github.com/ifootmark/fm-indexeddb</a><br>Demo：<a href="http://ifootmark.github.io/fm-indexeddb/test/index.html">http://ifootmark.github.io/fm-indexeddb/test/index.html</a><br>npm 包：<a href="https://www.npmjs.com/package/fm-indexeddb" target="_blank" rel="external">https://www.npmjs.com/package/fm-indexeddb</a></p>
<hr>
]]></content>
      
        <categories>
            
            <category> GitHub </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Node </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
